class Locators():
    #PageLoad
    advanced = "//button[contains(text(),'Advanced')]"
    proceed = "//a[contains(text(), 'Proceed')]"
    kubeadmin = "//a[contains(text(), 'kube:admin')]"
    input_username = "#inputUsername"
    input_password = "#inputPassword"
    login = "//button[@type='submit' and contains(., 'Log in')]"

    #Install operators
    operators = "(//button[contains(text(), 'Operators')])[1]"
    operatorhub = "(//a[contains(text(), 'OperatorHub')])[1]"
    installed_operators = "//a[contains(text(), 'Installed Operators')]"
    filter_by_keyword = "//input[@aria-label= 'Filter by keyword...']"
    ibm_cert_manager = "[data-test='ibm-cert-manager-operator-ibm-cert-manager-catalog-openshift-marketplace']"
    ibm_licensing = "[data-test='ibm-licensing-operator-app-ibm-licensing-catalog-openshift-marketplace']"
    ibm_cp4ba_filenet_content_manager = "[data-test='ibm-content-operator-ibm-cp4a-operator-catalog-openshift-marketplace']"
    install_side = "(//a[contains(text(), 'Install')])[2]"
    installed_operator_heading = "//span[contains(text(),'Install Operator')]"
    update_channel = "//label[contains(text(),'Update channel')]"
    channel_dd = "//label[contains(text(),'Update channel')]//following::div[2]/button"
    version_dd = "//label[normalize-space()='Version']/following::button[1]"
    option_1 = "(//button[@role='option'])[1]"
    specific_namespace_rb = "//label[contains(text(), 'A specific namespace on the cluster')]//input"
    installed_namespace = "//label[contains(text(), 'Installed Namespace')]//following-sibling::div//button"
    select_project = "//input[contains(@placeholder, 'Select Project')]"
    #to be checked operator_recommended_namespace_rb
    operator_recommended_namespace_rb = "//label[contains(text(), 'Operator recommended Namespace:')]//input"
    automatic_rb = "//label[contains(text(), 'Automatic')]//input"
    install_operator = "//button[@data-test='install-operator'][.//text()[contains(., 'Install')]]"
    install_error = "//h4[contains(text(), 'An error occurred')]"
    
    #InstalledOperatorCheck
    ibm_cert_manager_success_check = "//h1[contains(text(), 'IBM Cert Manager')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cloud_pak_foundational_services_success_check = "//h1[contains(text(), 'IBM Cloud Pak foundational services')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cp4ba_filenet_content_manager_success_check = "//h1[contains(text(), 'IBM CP4BA FileNet Content Manager')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cloud_pak_for_business_automation_cp4ba_multipattern_success_check = "//h1[contains(text(), 'IBM Cloud Pak for Business Automation (CP4BA) multi-pattern')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cp4ba_workflow_process_service_success_check = "//h1[contains(text(), 'IBM CP4BA Workflow Process Service')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cp4ba_insights_engine_success_check = "//h1[contains(text(), 'IBM CP4BA Insights Engine')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_cp4ba_process_federation_server_success_check = "//h1[contains(text(), 'IBM CP4BA Process Federation Server')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    ibm_business_automation_workflow_runtime_and_workstream_services_success_check = "//h1[contains(text(), 'IBM Business Automation Workflow Runtime and Workstream Services')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    operand_deployment_lifecycle_manager_success_check = "//h1[contains(text(), 'Operand Deployment Lifecycle Manager')]//following::td[.//span[contains(text(), 'Succeeded')]]"
    
    #Create Content
    namespace_dd = "//button[contains(@class, 'namespace-dropdown')]"
    cp4ba_filenet_content_manager_deployment = "//a[contains(text(), 'CP4BA FileNet Content Manager Deployment')]"
    create_content = "//button[contains( ., 'Create Content')]"
    formview = "//label[contains(text(), 'Form view')]/preceding-sibling::input"

    #Optional Components
    license = "//label[contains(text(), 'License')]"
    license_accept = "//label[contains(text(), 'accept')]"
    optional_component = "//label[contains(text(), 'Optional Component')]"
    bai = "//label[contains(text(), 'Business Automation Insights')]//following-sibling::label/span[1]"
    css = "//label[contains(text(), 'Content Search Services')]//following-sibling::label/span[1]"
    cmis = "//label[contains(text(), 'IBM Content Management Interoperability Services')]//following-sibling::label/span[1]"
    tm = "//label[contains(text(), 'IBM Task Manager')]//following-sibling::label/span[1]"
    ier = "//label[contains(text(), 'IBM Enterprise Records')]//following-sibling::label/span[1]"
    iccsap = "//label[contains(text(), 'IBM Content Collector for SAP')]//following-sibling::label/span[1]"
    deployment_type = "//label[contains(text(), 'Deployment Type')]/following::div/button[contains(@id, 'deployment_type')]/span"
    production_oc = "//button[contains(text(), 'Production')]"

    #Shared Configuration
    shared_configuration = "//label[contains(text(), 'Shared Configuration')]"
    select_purchased_fncm_license = "//span[contains(text(), 'Select Purchased FNCM license')]"
    production_sc = "//button[text() = 'production']"
    platform_dd = "//label[contains(text(), 'Platform')]//following-sibling::div/div/button/span"
    ocp = "//button[contains(text(), 'OCP')]"
    root_ca_secret = "//label[contains(text(), 'root_ca_secret')]/following::input[@id='root_spec_shared_configuration_root_ca_secret']"
    sc_drivers_url = "//label[contains(text(), 'sc_drivers_url')]/following::input[@id='root_spec_shared_configuration_sc_drivers_url']"
    profile_size = "//span[contains(text(), 'Select Profile Size')]"
    profile_size_small = "//button[text() = 'small']"
    enable_sample_network_policies = "//label[contains(text(), 'Enable sample network policies generation for CP4BA Content Pattern')]/following-sibling::label/span[1]"
    cp4ba_egress_settings = "//label[text() = 'CP4BA Egress Settings']"
    egress_toggle = "label[for='root_spec_shared_configuration_sc_egress_configuration_sc_restricted_internet_access'] .pf-v5-c-switch__toggle"
    egress_input = "#root_spec_shared_configuration_sc_egress_configuration_sc_restricted_internet_access"
    sample_network_policies_toggle = "label[for='root_spec_shared_configuration_sc_generate_sample_network_policies'] .pf-v5-c-switch__toggle"
    sample_network_policies_input = "#root_spec_shared_configuration_sc_generate_sample_network_policies"

    storage_configuration = "//label[contains(text(), 'Storage Configuration')]"
    block_storage_class_button = "//label[contains(text(), 'Block Storage Class')]/following-sibling::div//button"
    select_storage_class = "//input[contains(@placeholder, 'Select StorageClass')]"
    block_storage_class_managed_nfs_storage = "//span[contains(text(), 'managed-nfs-storage')]"
    slow_storage_class_button = "//label[contains(text(), 'Slow storage for Production')]/following-sibling::div//button"
    slow_storage_class_managed_nfs_storage = "(//span[contains(text(), 'managed-nfs-storage')])[2]"
    medium_storage_class_button = "//label[contains(text(), 'Medium storage for Production')]/following-sibling::div//button"
    medium_storage_class_managed_nfs_storage = "(//span[contains(text(), 'managed-nfs-storage')])[3]"
    fast_storage_class_button = "//label[contains(text(), 'Fast storage for Production')]/following-sibling::div//button"
    fast_storage_class_managed_nfs_storage = "(//span[contains(text(), 'managed-nfs-storage')])[4]"

    content_initialization_toggle = "label[for='root_spec_shared_configuration_olm_sc_content_initialization'] .pf-v5-c-switch__toggle"
    content_initialization_input = "#root_spec_shared_configuration_olm_sc_content_initialization"
    content_verification_toggle = "label[for='root_spec_shared_configuration_olm_sc_content_verification'] .pf-v5-c-switch__toggle"
    content_verification_input = "#root_spec_shared_configuration_olm_sc_content_verification"
    fips_toggle = "label[for='root_spec_shared_configuration_enable_fips'] .pf-v5-c-switch__toggle"
    fips_input = "#root_spec_shared_configuration_enable_fips"

    #LDAP Configuration MSAD/TDS
    ldap_configuration  = "//label[contains(text(), 'LDAP Configuration')]"
    directory_service_server_host_name = "//label[contains(text(), 'Directory service server host name')]/following-sibling::input"
    directory_service_server_port_number = "//label[contains(text(), 'Directory service server port number')]/following-sibling::input"
    directory_service_server_bind_secret = "//label[contains(text(), 'Directory service server bind secret')]/following-sibling::div//button"
    select_secret = "//input[contains(@placeholder, 'Select Secret')]"
    ldap_bind_secret = "(//span[contains(text(), 'ldap-bind-secret')])[2]"
    base_entry_distinguished_name_repository = "//label[contains(text(), 'Base entry distinguished name (repository)')]/following-sibling::input"
    directory_service_server_username_attribute = "//label[contains(text(), 'Directory service server user name attribute')]/following-sibling::input"
    directory_service_server_user_display_name_attribute = "//label[contains(text(), 'Directory service server user display name attribute')]/following-sibling::input"
    base_group_entry_distinguished_name_repository = "//label[contains(text(), 'Base group entry distinguished name (repository)')]/following-sibling::input"
    directory_service_server_group_name_attribute = "//label[contains(text(), 'Directory service server group name attribute')]/following-sibling::input"
    directory_service_server_group_display_name_attribute = "//label[contains(text(), 'Directory service server group display name attribute')]/following-sibling::input"
    directory_service_server_group_membership_search_filter = "//label[contains(text(), 'Directory service server group membership search filter')]/following-sibling::input"
    directory_service_server_group_member_id_map = "//label[contains(text(), 'Directory service server groupMember id map')]/following-sibling::input"
    directory_service_provider = "//label[contains(text(), 'Directory service provider')]/following-sibling::div//button"
    microsoft_active_directory = "//button[contains(text(), 'Microsoft Active Directory')]"
    ibm_security_directory_server = "//button[contains(text(), 'IBM Security Directory Server')]"
    ad = "//label[text()='AD']"
    ad_lc_user_filter = "//label[contains(text(), 'AD lc_user_filter')]/following-sibling::input"
    ad_lc_group_filter = "//label[contains(text(), 'AD lc_group_filter')]/following-sibling::input"
    tds = "//label[text()='TDS']"
    tds_lc_user_filter = "//label[contains(text(), 'TDS lc_user_filter')]/following-sibling::input"
    tds_lc_group_filter = "//label[contains(text(), '//label[contains(text(), 'TDS lc_group_filter')]/following-sibling::input"
    directory_service_server_ssl_tls_certificate_secret = "//label[contains(text(), 'Directory service server SSL/TLS certificate secret')]/following-sibling::div//button"
    ibm_cp4ba_ldap_ssl_secret = "//span[contains(text(), 'ibm-cp4ba-ldap-ssl-secret')]"
    directory_service_server_ssl_toggle = "//label[contains(text(), 'Enable Directory service server SSL/TLS')]/following-sibling::label/span[1]"
    directory_service_server_ssl_true = "//input[@aria-labelledby='root_spec_ldap_configuration_lc_ldap_ssl_enabled-on']"
    directory_service_server_ssl_false = "//input[@aria-labelledby='root_spec_ldap_configuration_lc_ldap_ssl_enabled-off']"
    ldap_ssl_toggle = "label[for='root_spec_ldap_configuration_lc_ldap_ssl_enabled'] .pf-v5-c-switch__toggle"
    ldap_ssl_input = "#root_spec_ldap_configuration_lc_ldap_ssl_enabled"

    #DB Configuration MSSQL/ORACLE/Posrgresql
    database_configuration = "//label[contains(text(), 'Database Configuration')]"
    db_ssl_toggle = "label[for='root_spec_datasource_configuration_dc_ssl_enabled'] .pf-v5-c-switch__toggle"
    db_ssl_input = "#root_spec_datasource_configuration_dc_ssl_enabled"
    db_precheck_toggle = "label[for='root_spec_datasource_configuration_database_precheck'] .pf-v5-c-switch__toggle"
    db_precheck_input = "#root_spec_datasource_configuration_database_precheck"

    gcd_datasource_configuration = "//label[contains(text(), 'GCD Datasource Configuration')]"
    gcd_non_xa_datasource_name = "(//label[contains(text(), 'Non-XA datasource name')]/following-sibling::input)[1]"
    gcd_xa_datasource_name = "(//label[text()='XA datasource name']/following-sibling::input)[1]"
    gcd_database_name = "(//label[text()='Database Name']/following-sibling::input)[1]"
    gcd_database_server_name = "(//label[text()='Database Server Name']/following-sibling::input)[1]"
    gcd_database_server_port = "(//label[text()='Database Server Port']/following-sibling::input)[1]"
    gcd_db_ssl_certificate_secret = "(//label[contains(text(), 'DB SSL Certificate Secret')]/following-sibling::div//button)[1]"
    gcd_ibm_cp4ba_db_ssl_secret_for_db = "//span[contains(text(), 'ibm-cp4ba-db-ssl-secret-for-db')]"
    gcd_database_type = "(//label[contains(text(), 'Database Type')]/following-sibling::div//button)[1]"
    gcd_database_type_sqlserver = "//button[contains(text(), 'sqlserver')]"
    gcd_database_type_oracle = "//button[contains(text(), 'oracle')]"
    gcd_database_type_postgresql = "//button[contains(text(), 'postgresql')]"
    gcd_oracle_db_connection_string = "(//label[text()='Oracle DB Connection String']/following-sibling::input)[1]"

    content_management_os_datasource_configuration = "//label[contains(text(), 'Content Management OS Datasource Configuration')]"
    os1_database_type = "(//label[contains(text(), 'Database Type')]/following-sibling::div//button)[2]"
    object_store_label_for_content_management = "(//label[text()='Object Store label for Content Management']/following-sibling::input)[1]"
    os1_non_xa_datasource_name = "(//label[text()='Non-XA Datasource Name']/following-sibling::input)[1]"
    os1_xa_datasource_name = "(//label[text()='XA datasource name']/following-sibling::input)[2]"
    os1_database_server_name = "(//label[text()='Database Server Name']/following-sibling::input)[2]"
    os1_database_name = "(//label[text()='Database Name']/following-sibling::input)[2]"
    os1_database_server_port = "(//label[text()='Provide the database Server Port']/following-sibling::input)[1]"
    os1_db_ssl_certificate_secret = "(//label[contains(text(), 'DB SSL certificate Secret')]/following-sibling::div//button)[1]"
    os1_ibm_cp4ba_db_ssl_secret_for_db = "(//span[contains(text(), 'ibm-cp4ba-db-ssl-secret-for-db')])[2]"
    advanced_configuration = "(//span[contains(text(), 'advanced configuration')])[1]"
    os1_oracle_db_connection_string = "(//label[text()='Oracle DB Connection String']/following-sibling::input)[2]"

    navigator_datasource_configuration = "//label[contains(text(), 'Navigator Datasource Configuration')]"
    navigator_datasource_name = "(//label[text()='Datasource Name']/following-sibling::input)[1]"
    navigator_database_server_name = "(//label[text()='Database Server Name']/following-sibling::input)[3]"
    navigator_database_name = "(//label[text()='Navigator Database Name']/following-sibling::input)[1]"
    navigator_database_server_port = "(//label[text()='Database Server Port']/following-sibling::input)[2]"
    navigator_db_ssl_certificate_secret = "(//label[contains(text(), 'DB SSL Certificate Secret')]/following-sibling::div//button)[2]"
    navigator_ibm_cp4ba_db_ssl_secret_for_db = "(//span[contains(text(), 'ibm-cp4ba-db-ssl-secret-for-db')])[3]"
    navigator_database_type = "//label[contains(text(), 'Database type')]/following-sibling::div//button"
    navigator_oracle_db_connection_string = "(//label[text()='Oracle DB Connection String']/following-sibling::input)[3]"
    
    #Initialization Configuration
    initialization_configuration = "//label[text()= 'Initialization Configuration']"
    ldap_creation = "//label[text()= 'LDAP Creation']"
    ldap_administrator_user = "//label[text()= 'LDAP Administrator user']"
    add_ldap_administrator_user = "//button[contains(text(), 'Add LDAP Administrator user')]"
    ldap_admin_group_name = "//label[text()= 'LDAP Admin Group name']"
    ldap_administrator_user_input = "//input[@id= 'root_spec_initialize_configuration_ic_ldap_creation_ic_ldap_admin_user_name_0']"
    ldap_admin_group_name_input = "//input[@id= 'root_spec_initialize_configuration_ic_ldap_creation_ic_ldap_admins_groups_name_0']"
    
    object_store_creation = "//label[text()= 'Object Store Creation']"
    object_store_details = "//label[text()= 'Object Store Details']"
    object_store_display_name = "(//label[text()='Object Store Display name']/following-sibling::input)[1]"
    object_store_symbolic_name = "(//label[text()='Object Store Symbolic name']/following-sibling::input)[1]"
    object_store_connection_details = "//label[text()='Object Store Connection details']"
    object_store_connection_name = "(//label[text()='Object Store Connection name']/following-sibling::input)[1]"
    object_store_datasource_name = "(//label[text()='Object Store Datasource name']/following-sibling::input)[1]"
    object_store_xa_datasource_name = "(//label[text()='Object Store XA Datasource name']/following-sibling::input)[1]"
    object_store_admin_user_groups = " //label[text()='Object Store Admin User groups']"
    add_object_store_admin_user_groups = "//button[contains(text(), 'Add Object Store Admin User groups')]"
    object_store_admin_user_groups_input = "//input[@id= 'root_spec_initialize_configuration_ic_obj_store_creation_object_stores_0_oc_cpe_obj_store_admin_user_groups_0']"
   
    object_store_enable_workflow_toggle = "//label[contains(text(), 'Object Store - enable workflow')]/following-sibling::label/span[1]"
    object_store_table_space = "(//label[text()='Object Store - table space']/following-sibling::input)[1]"
    object_store_workflow_admin_group = "(//label[text()='Object Store - Workflow admin group']/following-sibling::input)[1]"
    object_store_workflow_config_group = "(//label[text()='Object Store - Workflow config group']/following-sibling::input)[1]"
    object_store_connection_point_for_workflow = "(//label[text()='Object Store - Connection point for Workflow']/following-sibling::input)[1]"
    
    navigator_initialization_configuration = "//label[text()= 'Navigator Initialization Configuration']"
    navigator_repository = "//label[text()= 'Navigator Repository']"
    add_navigator_repository = "//button[text()= 'Add Navigator Repository']"
    fncm_repository_identification_id = "(//label[text()='FNCM Repository Identification ID']/following-sibling::input)[1]"
    fncm_repository_wsi_url = "(//label[text()='FNCM Repository WSI URL']/following-sibling::input)[1]"
    fncm_object_store_symbolic_name = "(//label[text()='FNCM ObjectStore Symbolic Name']/following-sibling::input)[1]"
    fncm_object_store_display_name = "(//label[text()='FNCM ObjecStore Display Name']/following-sibling::input)[1]"
    enable_workflow_for_fncm_repository_toggle = "//label[contains(text(), 'Enable workflow for FNCM repository')]/following-sibling::label/span[1]"
    fncm_repository_connection_point = "(//label[text()='FNCM Repository Connection Point']/following-sibling::input)[1]"
    fncm_repository_protocol = "(//label[text()='FNCM Repository Protocol']/following-sibling::input)[1]"
    
    navigator_desktop_configuration = "//label[text()= 'Navigator Desktop Configuration']"
    add_navigator_desktop_configuration = "//button[text()= 'Add Navigator Desktop Configuration']"
    navigator_desktop_id = "(//label[text()='Navigator Desktop Id']/following-sibling::input)[1]"
    navigator_desktop_name = "(//label[text()='Navigator Desktop Name']/following-sibling::input)[1]"
    navigator_desktop_description = "(//label[text()='Navigator Desktop Description']/following-sibling::input)[1]"
    enable_navigator_desktop_as_default_toggle = "//label[contains(text(), 'Enable Navigator Desktop as default')]/following-sibling::label/span[1]"
    navigator_repository_id = "(//label[text()='Navigator Repository ID']/following-sibling::input)[1]"
    enable_workflow_for_navigator_desktop_toggle = "//label[contains(text(), 'Enable Workflow for Navigator desktop')]/following-sibling::label/span[1]"
    
    
    create_content_button = "//button[contains(text(), 'Create')]"
    



    
   
